generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Slug {
  id       String     @id @default(cuid())
  title    String
  value    String     @unique
  lawBlock LawBlock[]
}

model LawComment {
  id        String   @id @default(cuid())
  title     String
  text      String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lawBlock   LawBlock? @relation(fields: [lawBlockId], references: [id])
  lawBlockId String?

}

model BlockAuthor {
  id   String @id @default(cuid())
  name String

  lawBlock LawBlock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LawBlock {
  id       String    @id @default(cuid())
  type     BlockType @default(ARTIGO_LEI)
  isActive Boolean   @default(true)

  checksum String?

  source String? //url to be crawled

  version Int     @default(1)
  isRef   Boolean @default(false)

  index Int?

  title        String?
  name         String?
  value        String?
  originalText String?
  searchText   String?

  identifier String?

  artigo    String?
  inciso    String?
  paragrafo String?
  aliena    String?

  comments LawComment[]

  year DateTime?

  subsOnly     Boolean @default(false)
  searchString String?
  urlSlug      String?

  slug   Slug?   @relation(fields: [slugId], references: [id])
  slugId String?

  feedItem   FeedItem?
  feedItemId String?


  // - - - - - - - - - - - -
  // SELF RELATIONS
  // - - - - - - - - - - - -

  // 'Belongs to' creates a relationship to the master block which carry all childrens blocks
  // 'Belongs to' refers to a block with belongs to a master block which owns a lot of blocks
  // A block belongs to a block
  belongsTo           LawBlock?  @relation("LawBlockBelongsToMasterLawBlock", fields: [belongsToLawBlockId], references: [id], onDelete: Cascade)
  belongsToLawBlockId String?
  // a block owns blocks
  ownsBlocks          LawBlock[] @relation("LawBlockBelongsToMasterLawBlock")

  // a parent block has a content
  // a child block has a parent


  content       LawBlock[] @relation("LawBlockHasContent") // parent block
  parentBlock   LawBlock?  @relation("LawBlockHasContent", fields: [parentBlockId], references: [id], onDelete: Cascade)
  parentBlockId String?

  // parentBlock   LawBlock? @relation("BlockContentParent", fields: [parentBlockId], references: [id], onDelete: Cascade)
  // parentBlockId String?
  // content LawBlock[] @relation("BlockContentParent")

  isRelatedTo    LawBlock?  @relation("BlockRelatedBlock", fields: [relatedBlockId], references: [id])
  relatedBlockId String?
  relatedBlocks  LawBlock[] @relation("BlockRelatedBlock")

  author        BlockAuthor? @relation(fields: [blockAuthorId], references: [id])
  blockAuthorId String?

  crawler   Crawler? @relation(fields: [crawlerId], references: [id], onDelete: Cascade)
  crawlerId String?  @unique

  topic   Topic?  @relation(fields: [topicId], references: [id])
  topicId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categories     Category[]
  jurisprudencia Jurisprudencia[]
}

model Tribunal {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  jurisprudencias Jurisprudencia[]
}

model Jurisprudencia {
  id       String  @id @default(cuid())
  source   String
  checkSum String
  updated  Boolean

  tipo      TipoJudiciario
  instancia Instancia

  tribunal   Tribunal? @relation(fields: [tribunalId], references: [id])
  tribunalId String?

  estado  String
  comarca String?

  dataJulgamento DateTime?
  dataPublicacao DateTime?

  ementa           String?
  integra          String?
  numeroProcesso   String?
  orgaoJulgador    String?
  relator          String?
  segredoDeJustica String?
  keyWords         String?
  slug             String?

  legislacao LawBlock[]

  history              Jurisprudencia[] @relation("JurisprudenciaChanges", references: [id])
  jurisprudenceChanges Jurisprudencia[] @relation("JurisprudenciaChanges", references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String
  editedBy    User[]

  lawBlocks LawBlock[]
  feedItems FeedItem[]


  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  crawlers  Crawler[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
  authorId  String
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  id      String  @id @default(cuid())
  bio     String?
  picture String?
  userId  String  @unique
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String   @id @default(cuid())
  name     String?  @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  username String?  @db.VarChar(255)
  tokens   String[]
  admin    Boolean  @default(false)
  googleId String   @unique
  isPro    Boolean? @default(false)


  role UserRole @default(USER)

  profile       Profile?
  posts         Post[]
  subscriptions Subscription[]
  customer      Customer?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  LawComment LawComment[]

  followingTopics Topic[]
  readFeedItems   FeedItem[]

  editedCategories Category[]

}

model Feed {
  id   String @id @default(cuid())
  name String

  feedItems FeedItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model FeedItem {
  id      String @id @default(cuid())
  title   String
  content Json

  lawBlock   LawBlock? @relation(fields: [lawBlockId], references: [id])
  lawBlockId String?   @unique

  topic     Topic    @relation(fields: [topicId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topicId   String

  readBy User[]

  feed       Feed?      @relation(fields: [feedId], references: [id])
  feedId     String?
  categories Category[]

}

model Topic {
  id          String @id @default(cuid())
  name        String
  description String

  feedItems FeedItem[]
  followers User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lawBlock LawBlock[]
  crawler  Crawler[]
}

model CrawlerType {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  customCode  String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Crawler   Crawler[]
}

model Crawler {
  id          String       @id @default(uuid())
  name        String
  crawlerType CrawlerType? @relation(fields: [crawlerTypeId], references: [id])

  description   String
  isUrlOnly     Boolean @default(true) // check if crawler only crawls by the given url
  source        String?
  cron          String
  notifyUpdates Boolean @default(true)

  slug                 String?
  mainBlockTitle       String?
  mainBlockDescription String?
  version              Int?      @default(1)
  blockType            BlockType @default(CODIGO)

  originalHtml      String?
  pageTextToCompare String?


  lawBlock LawBlock?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lawBlockId String?  @unique

  crawlerTypeId String?

  topic   Topic?  @relation(fields: [topicId], references: [id])
  topicId String?

  categories Category[]
}

model Customer {
  id       String @id @default(cuid())
  stripeId String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Subscription {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  isActive Boolean @default(true)



  stripePaymentId     String?
  stripeTransactionId String?

  stripeSubscriptionId String @unique
  customerId           String

  startDate         DateTime
  endDate           DateTime
  quantity          Int?
  cancelAtPeriodEnd Boolean?
  cancelAt          DateTime?
  canceledAt        DateTime?
  created           DateTime?
  endedAt           DateTime?

  trialStart DateTime?
  trialEnd   DateTime?

  invoiceUrl String?
  receiptUrl String?
  pdfInvoice String?
  urlInvoice String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

enum UserRole {
  USER
  PRO
  MEMBER
  ADMIN
}

enum BlockType {
  NORMA
  PORTARIA
  DECRETO
  LEI
  JURISPRUDENCIA
  ARTIGO_LEI
  PARAGRAFO_LEI
  INCISO_LEI
  ALINEA_LEI
  PARAGRAFO_UNICO_LEI
  INFO
  CODIGO
}

enum TipoJudiciario {
  JUSTICA_ESTADUAL
  JUSTICA_FEDERAL
  JUIZADO_ESPECIAL
}

enum Instancia {
  PRIMEIRA_INSTANCIA
  SEGUNDA_INSTANCIA
  TERCEIRA_INSTANCIA
}
