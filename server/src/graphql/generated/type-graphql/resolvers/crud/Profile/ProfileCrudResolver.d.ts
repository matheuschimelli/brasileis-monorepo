import { GraphQLResolveInfo } from "graphql";
import { AggregateProfileArgs } from "./args/AggregateProfileArgs";
import { CreateManyProfileArgs } from "./args/CreateManyProfileArgs";
import { CreateProfileArgs } from "./args/CreateProfileArgs";
import { DeleteManyProfileArgs } from "./args/DeleteManyProfileArgs";
import { DeleteProfileArgs } from "./args/DeleteProfileArgs";
import { FindFirstProfileArgs } from "./args/FindFirstProfileArgs";
import { FindManyProfileArgs } from "./args/FindManyProfileArgs";
import { FindUniqueProfileArgs } from "./args/FindUniqueProfileArgs";
import { GroupByProfileArgs } from "./args/GroupByProfileArgs";
import { UpdateManyProfileArgs } from "./args/UpdateManyProfileArgs";
import { UpdateProfileArgs } from "./args/UpdateProfileArgs";
import { UpsertProfileArgs } from "./args/UpsertProfileArgs";
import { Profile } from "../../../models/Profile";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateProfile } from "../../outputs/AggregateProfile";
import { ProfileGroupBy } from "../../outputs/ProfileGroupBy";
export declare class ProfileCrudResolver {
    profile(ctx: any, info: GraphQLResolveInfo, args: FindUniqueProfileArgs): Promise<Profile | null>;
    findFirstProfile(ctx: any, info: GraphQLResolveInfo, args: FindFirstProfileArgs): Promise<Profile | null>;
    profiles(ctx: any, info: GraphQLResolveInfo, args: FindManyProfileArgs): Promise<Profile[]>;
    createProfile(ctx: any, info: GraphQLResolveInfo, args: CreateProfileArgs): Promise<Profile>;
    createManyProfile(ctx: any, info: GraphQLResolveInfo, args: CreateManyProfileArgs): Promise<AffectedRowsOutput>;
    deleteProfile(ctx: any, info: GraphQLResolveInfo, args: DeleteProfileArgs): Promise<Profile | null>;
    updateProfile(ctx: any, info: GraphQLResolveInfo, args: UpdateProfileArgs): Promise<Profile | null>;
    deleteManyProfile(ctx: any, info: GraphQLResolveInfo, args: DeleteManyProfileArgs): Promise<AffectedRowsOutput>;
    updateManyProfile(ctx: any, info: GraphQLResolveInfo, args: UpdateManyProfileArgs): Promise<AffectedRowsOutput>;
    upsertProfile(ctx: any, info: GraphQLResolveInfo, args: UpsertProfileArgs): Promise<Profile>;
    aggregateProfile(ctx: any, info: GraphQLResolveInfo, args: AggregateProfileArgs): Promise<AggregateProfile>;
    groupByProfile(ctx: any, info: GraphQLResolveInfo, args: GroupByProfileArgs): Promise<ProfileGroupBy[]>;
}
