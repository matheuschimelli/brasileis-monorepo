generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Slug {
  id       String     @id @default(cuid())
  title    String
  value    String     @unique
  lawBlock LawBlock[]
}

model LawComment {
  id        String   @id @default(cuid())
  title     String
  text      String
  author    User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lawBlock   LawBlock? @relation(fields: [lawBlockId], references: [id])
  lawBlockId String?

}

model BlockAuthor {
  id   String @id @default(cuid())
  name String

  lawBlock LawBlock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LawBlock {
  id   String    @id @default(cuid())
  type BlockType @default(ARTIGO_LEI)

  source String? //url to be crawled

  version Int     @default(1)
  isRef   Boolean @default(false)

  order Int @default(1)

  title        String?
  name         String?
  value        String?
  originalText String?
  searchText   String?

  identifier String?

  artigo    String?
  inciso    String?
  paragrafo String?
  aliena    String?

  comments LawComment[]

  year DateTime?

  subsOnly     Boolean @default(false)
  searchString String?

  urlSlug String?

  slug   Slug?   @relation(fields: [slugId], references: [id])
  slugId String?

  blockId     String?
  parentBlock LawBlock?  @relation("BlockContentParent", fields: [blockId], references: [id])
  content     LawBlock[] @relation("BlockContentParent")


  relatedBlockId String?
  isRelatedTo    LawBlock?  @relation("BlockRelatedBlock", fields: [relatedBlockId], references: [id])
  relatedBlocks  LawBlock[] @relation("BlockRelatedBlock")

  author        BlockAuthor? @relation(fields: [blockAuthorId], references: [id])
  blockAuthorId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Crawler   Crawler?
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
  authorId  String
  user      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  id      String  @id @default(cuid())
  bio     String?
  picture String?
  userId  String  @unique
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String   @id @default(cuid())
  name     String?  @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  username String?  @db.VarChar(255)
  tokens   String[]
  admin    Boolean  @default(false)
  googleId String   @unique
  isPro    Boolean? @default(false)


  role UserRole @default(USER)

  profile       Profile?
  posts         Post[]
  subscriptions Subscription[]
  customer      Customer?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  LawComment LawComment[]
}

model Crawler {
  id            String  @id @default(uuid())
  name          String
  description   String
  isUrlOnly     Boolean @default(true) // check if crawler only crawls by the given url
  source        String?
  cron          String
  notifyUpdates Boolean @default(true)


  lawBlock LawBlock @relation(fields: [lawBlockId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lawBlockId String   @unique
}

model Customer {
  id       String @id @default(cuid())
  stripeId String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Subscription {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  isActive Boolean @default(true)



  stripePaymentId     String?
  stripeTransactionId String?

  stripeSubscriptionId String @unique
  customerId           String

  startDate         DateTime
  endDate           DateTime
  quantity          Int?
  cancelAtPeriodEnd Boolean?
  cancelAt          DateTime?
  canceledAt        DateTime?
  created           DateTime?
  endedAt           DateTime?

  trialStart DateTime?
  trialEnd   DateTime?

  invoiceUrl String?
  receiptUrl String?
  pdfInvoice String?
  urlInvoice String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

enum UserRole {
  USER
  PRO
  MEMBER
  ADMIN
}

enum BlockType {
  NORMA
  PORTARIA
  DECRETO
  LEI
  JURISPRUDENCIA
  ARTIGO_LEI
  PARAGRAFO_LEI
  INCISO_LEI
  ALINEA_LEI
  PARAGRAFO_UNICO_LEI
  INFO
  CODIGO
}
