// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../src/graphql/generated/type-graphql"
  emitTranspiledCode = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BlockProperty {
  id           String  @id @default(cuid())
  value        String?
  title        String?
  number       String?
  identifier   String?
  comment      String?
  year         Int?
  author       String?
  subsOnly     Boolean @default(false)
  searchString String?

  lawBlockId String   @unique
  LawBlock   LawBlock @relation(fields: [lawBlockId], references: [id])
}

model LawBlock {
  id         String         @id @default(cuid())
  type       BlockType      @default(ARTICLE)
  content    LawBlock[]     @relation("LawBlockToLawBlock")
  properties BlockProperty?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  LawBlock   LawBlock? @relation("LawBlockToLawBlock", fields: [lawBlockId], references: [id], onDelete: Cascade)
  lawBlockId String?
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  content   String?
  published Boolean  @default(false)
  authorId  String
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Profile {
  id      String  @id @default(cuid())
  bio     String?
  picture String?
  userId  String  @unique
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id       String   @id @default(cuid())
  name     String?  @db.VarChar(255)
  email    String   @unique @db.VarChar(255)
  username String?  @db.VarChar(255)
  tokens   String[]
  admin    Boolean  @default(false)
  googleId String   @unique
  isPro    Boolean? @default(false)


  role UserRole @default(USER)

  profile       Profile?
  posts         Post[]
  subscriptions Subscription[]
  Customer      Customer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id       String @id @default(cuid())
  stripeId String @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Subscription {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  isActive Boolean @default(true)



  stripePaymentId     String?
  stripeTransactionId String?

  stripeSubscriptionId String @unique
  customerId           String

  startDate         DateTime
  endDate           DateTime
  quantity          Int?
  cancelAtPeriodEnd Boolean?
  cancelAt          DateTime?
  canceledAt        DateTime?
  created           DateTime?
  endedAt           DateTime?

  trialStart DateTime?
  trialEnd   DateTime?

  invoiceUrl String?
  receiptUrl String?
  pdfInvoice String?
  urlInvoice String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

enum UserRole {
  USER
  PRO
  MEMBER
  ADMIN
}

enum BlockType {
  LAW
  JURISPRUDENCE
  ARTICLE
  PARAGRAPH
  INCISE
  ALINEA
  UNIQUE_PARAGRAPH
  INFO
  CODE
  CONSTITUTION
}
